<?php session_start();?><?php require_once("services.config.properties.php"); ?><?php require_once("dataValidation.php"); ?><?php require_once($GLOBALS["CONTROLLER_PATH"] . "BusinessControllers/bc.config.properties.php"); ?><?php require_once($GLOBALS["CONTROLLER_PATH"]."BusinessControllers/SubscriberServices.php");?><?php require_once($GLOBALS["CONTROLLER_PATH"]."BusinessControllers/ServiceResponse.php"); ?><?php require_once($GLOBALS["LIB_PATH"]."/Wrappers/nusoap.php"); ?><?php require_once($GLOBALS["LIB_PATH"] . "Utils/utils.Common.php"); ?><?php	$serv = new SubscriberServices();	$dataV = new dataValidation();if(isset($_SESSION["currentUser"])){	if(isset($_REQUEST["Method"])){		$_SESSION['timeout'] = time();		switch($_REQUEST["Method"]){					case "pendingAccountView":				$ret = $serv->search(strtoupper($_REQUEST["txtSearch"]),$_REQUEST["rdoSearchOption"]);				header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}else{					$_SESSION["EditAccount"] = false;					$_SESSION["ApproveAccount"] = false;					if($_SESSION['roles']['EDIT_ACCOUNT']=='YES'){						switch($ret->AccountInformation->AccountType){							case "MCOM":								if($_SESSION['roles']['EDIT_MCOM']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_MCOM']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "AGNT":								if($_SESSION['roles']['EDIT_AGNT']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_AGNT']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;									    								      							case "DLER":								if($_SESSION['roles']['EDIT_DLER']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_DLER']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "MERC":							case "BILL":								if($_SESSION['roles']['EDIT_MERC_/_BILLER']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_MERC_/_BILLER']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "CORP":								if($_SESSION['roles']['EDIT_CORP']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_CORP']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "BANK":								if($_SESSION['roles']['EDIT_BANK']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_BANK']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "TEMP":								if($_SESSION['roles']['EDIT_TEMP']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_TEMP']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "WAGE":								if($_SESSION['roles']['EDIT_WAGE']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_WAGE']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;							case "BLOC":								if($_SESSION['roles']['EDIT_BLOC']=='YES'){$_SESSION['EditAccount'] = true;}								if($_SESSION['roles']['APPROVE_BLOC']=='YES'){$_SESSION['ApproveAccount'] = true;}							break;						}					}				}																$access = array($_SESSION['EditAccount'], $_SESSION['ApproveAccount']);				$arr = array("Result"=>$ret, "Access"=>$access);				echo json_encode($arr);			break;			case "activate":                				if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					$ret = $serv->activate($_REQUEST["MSISDN"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						$_SESSION['currentSearch']->AccountInformation->Status="ACTIVE";						echo $_REQUEST["MSISDN"] . _(" has been successfully activated.");					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for Activation!");				}                               break;            case "deactivate":                				if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					$ret = $serv->deactivate($_REQUEST["MSISDN"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						$_SESSION['currentSearch']->AccountInformation->Status="DEACTIVE";						echo $_REQUEST["MSISDN"] . _(" has been successfully deactivated.");					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for Deactivation!");				}                           break;			case "lock":                				if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					if($_REQUEST["LockDescription"] != ''){						$ret = $serv->lock($_REQUEST["MSISDN"],$_REQUEST["LockDescription"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0){							$_SESSION['currentSearch']->AccountInformation->Locked="true";							echo $_REQUEST["MSISDN"] . _(" has been successfully locked.");						}else{							echo $ret->Message;						}					}else{						echo _("Please input lock description");					}									}else{					echo _("Not Valid for lock!");				}                			break;			case "unlock":                				if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					$ret = $serv->unlock($_REQUEST["MSISDN"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						$_SESSION['currentSearch']->AccountInformation->Locked="false";						echo $_REQUEST["MSISDN"] . _(" has been successfully unlocked.");					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for unlock!");				}                			break;			case "resetPassword":                				if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					$ret = $serv->resetPassword($_REQUEST["MSISDN"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						echo _("Successfully Reset Password");					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for reset password!");				}                			break;			case "updateAccount":							$validation = true;				$resMessage = "";								$msisdn = isset($_REQUEST["MSISDN"])?$_REQUEST["MSISDN"]:$_SESSION['currentSearch']->AccountInformation->MobileNumber;				$alias = isset($_REQUEST["ALIAS"])?$_REQUEST["ALIAS"]:$_SESSION['currentSearch']->AccountInformation->Alias;				$type = isset($_REQUEST["TYPE"])?$_REQUEST["TYPE"]:$_SESSION['currentSearch']->AccountInformation->AccountType;				$kyc = isset($_REQUEST["KYC"])?$_REQUEST["KYC"]:$_SESSION['currentSearch']->AccountInformation->KYC;				$accountstatus = isset($_REQUEST["ACCOUNTSTATUS"])?$_REQUEST["ACCOUNTSTATUS"]:$_SESSION['currentSearch']->AccountInformation->Status;				$refaccount = isset($_REQUEST["REFACCOUNT"])?$_REQUEST["REFACCOUNT"]:$_SESSION['currentSearch']->AccountInformation->ReferenceAccount;				$locked = isset($_REQUEST["LOCKED"])?$_REQUEST["LOCKED"]:($_SESSION['currentSearch']->AccountInformation->Locked=='true'?"YES":"NO");												$corpdate = isset($_REQUEST["CORPDATEOFINCORPORATION"])?$_REQUEST["CORPDATEOFINCORPORATION"]:$_SESSION['currentSearch']->AccountInformation->CorpInformation->dateofincorporation;				$corpbname = isset($_REQUEST["CORPBUSINESSNAME"])?$_REQUEST["CORPBUSINESSNAME"]:$_SESSION['currentSearch']->AccountInformation->CorpInformation->businessname;				$corptnumber = isset($_REQUEST["CORPTRADELICENSENUMBER"])?$_REQUEST["CORPTRADELICENSENUMBER"]:$_SESSION['currentSearch']->AccountInformation->CorpInformation->tradelicensenumber;				$corpraddress = isset($_REQUEST["CORPREGISTEREDADDRESS"])?$_REQUEST["CORPREGISTEREDADDRESS"]:$_SESSION['currentSearch']->AccountInformation->CorpInformation->registeredaddress;				$corptype = isset($_REQUEST["CORPTYPEOFBUSINESS"])?$_REQUEST["CORPTYPEOFBUSINESS"]:$_SESSION['currentSearch']->AccountInformation->CorpInformation->typeofbusiness;				$corpoinfo = isset($_REQUEST["CORPOWNERSHIPINFO"])?$_REQUEST["CORPOWNERSHIPINFO"]:$_SESSION['currentSearch']->AccountInformation->CorpInformation->ownershipinfo;								if($_REQUEST["EMAIL"] != ''){					if(!filter_var($_REQUEST["EMAIL"], FILTER_VALIDATE_EMAIL)){						$validation = false;						$resMessage = _("Invalid Email format.");					}				}				if(!$dataV->CheckAlpha($_REQUEST['LASTNAME']) || !$dataV->CheckAlpha($_REQUEST['FIRSTNAME']) || !$dataV->CheckAlpha($_REQUEST['IDNUMBER']) || !$dataV->CheckAlpha($_REQUEST['IDDESC']) || !$dataV->CheckAlpha($_REQUEST['NATIONALITY']) || !$dataV->CheckAlpha($_REQUEST['POB']) || !$dataV->CheckAlpha($_REQUEST['CITY']) || !$dataV->CheckAlpha($_REQUEST['REGION']) || !$dataV->CheckAlpha($_REQUEST['COUNTRY']) || !$dataV->CheckAlpha($_REQUEST['STREET'])){					$validation = false;					$resMessage = _("Please input valid format.");				}								if($msisdn == '' || $_REQUEST["GENDER"] == '' || $_REQUEST["LASTNAME"] == '' || $_REQUEST["FIRSTNAME"] == '' || $_REQUEST["DOB"] == '' || $_REQUEST["IDNUMBER"] == '' || $_REQUEST["IDDESC"] == '' || $_REQUEST["NATIONALITY"] == '' || $_REQUEST["POB"] == '' || $_REQUEST["CITY"] == '' || $_REQUEST["REGION"] == '' || $_REQUEST["COUNTRY"] == '' || $type == '' || $kyc == '' || $accountstatus == '' || $refaccount == '' || $_REQUEST["STREET"] == '' || $locked == '' ){					$validation = false;					$resMessage = _("Please input all required fields.");				}																				if($validation){										$exp = $_REQUEST['EXPIRY'] == "" ? date('Y-m-d') : $_REQUEST['EXPIRY'];					$ret = $serv->updateAccount($msisdn,$alias,$_REQUEST["GENDER"],												$_REQUEST["LASTNAME"],$_REQUEST["MIDDLENAME"],$_REQUEST["FIRSTNAME"],												$_REQUEST["EMAIL"],$_REQUEST["DOB"],$_REQUEST["IDNUMBER"],												$_REQUEST["IDDESC"],$exp,$_REQUEST["NATIONALITY"],$_REQUEST["POB"],												$_REQUEST["CITY"],$_REQUEST["REGION"],$_REQUEST["COUNTRY"],												$type,$kyc,$accountstatus,												$refaccount,$_SESSION["currentUser"],$_REQUEST["BUILDING"],												$_REQUEST["STREET"],$_REQUEST["COMPANY"],$_REQUEST["PROFESSION"],$locked,												$_REQUEST["ALTNUMBER"],$corpdate,$corpbname,												$corptnumber,$corpraddress,$corptype,												$corpoinfo);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						echo _("You have successfully saved your account");					}else if($ret->ResponseCode == 2 || $ret->ResponseCode == 3){						echo _("Account does not exist");					}else{						echo $ret->Message;					}				}else{					echo $resMessage;				}			break;						case "approveKYC":                				if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					$ret = $serv->approveKYC($_REQUEST["MSISDN"], $_SESSION["currentUser"]);     										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						echo _("Successfully Changed KYC Status");					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for update KYC!");				}					   			break;			case "rejectKYC":										if(isset($_REQUEST["MSISDN"]) && $_REQUEST["MSISDN"] != ''){					$ret = $serv->rejectKYC($_REQUEST["MSISDN"], $_SESSION["currentUser"]);     			 					if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						echo _("Successfully Changed KYC Status");					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for update KYC!");				}					   			break;			case "allocate":							/*data validation*/				$validation = true;				$validationMessage = "";				if ($_SESSION["currentPassword"] != $_REQUEST["PASSWORD"]){					$validation = false;					$validationMessage = _("Please input your correct PASSWORD!");				}				if ($_REQUEST["PASSWORD"] == ''){					$validation = false;					$validationMessage = _("Please input your PASSWORD!");				}				if(!$dataV->CheckAlpha($_REQUEST["REMARKS"])){					$validation = false;					$validationMessage = "Please input valid format for REMARKS.";				}				if ($_REQUEST["REMARKS"] == ''){					$validation = false;					$validationMessage = _("Please input REMARKS!");				}				if ($_REQUEST["AMOUNT"] == ''){					$validation = false;					$validationMessage = _("Please input AMOUNT!");				}				if ($_REQUEST["MSISDN"] == ''){					$validation = false;					$validationMessage = _("Not valid for allocation/deallocation.");				}								if($validation){										$ret = $serv->allocate($_REQUEST["MSISDN"],$_REQUEST["AMOUNT"],$_SESSION["currentUser"],$_REQUEST["REMARKS"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0){						echo _("Success, please wait for the approval");					}else{						echo $ret->Message;					}									}else{					echo $validationMessage;				}			break;                        case "userLogin":                $ret = $serv->userLogin($_REQUEST["username"], $_REQUEST["password"]);                echo $ret->Message;            break;			case "userRolesList":                $ret = $serv->userRolesList();                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;                        case "updateModule":                				if(isset($_REQUEST["module"]) && $_REQUEST["module"] != ''){					$value = ($_REQUEST['action'] == "NO") ? "YES" : "NO";                					$ret = $serv->updateModule($_SESSION['userroles'],$_REQUEST['module'],$value);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0 ){						echo $_REQUEST['module'] . _("'s module has been successfully set to ") . $value . ".";                        					}else{						echo $ret->Message;					}									}else{					echo _("Not Valid for update user module!");				}                            break;                        case "userRolesAddnew":                				if(isset($_REQUEST["userlevel"]) && $_REQUEST["userlevel"] != '' && $_REQUEST["sessiontimeout"] != '' && $_REQUEST["passwordchange"] != '' && $_REQUEST["passwordexpiry"] != '' && $_REQUEST["minpassword"] != '' && $_REQUEST["passwordhistory"] != '' && $_REQUEST["maxallocation"] != '' && $_REQUEST["searchrange"] != ''){					$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["userlevel"])){						$validation = false;						$validationMessage = _("Please input valid format for User Level.");					}					if(!$dataV->CheckNumeric($_REQUEST["sessiontimeout"]) || !$dataV->CheckNumeric($_REQUEST["passwordchange"])){						$validation = false;						$validationMessage = _("Please input valid format for session timeout / password change.");					}					if(!$dataV->CheckNumeric($_REQUEST["passwordexpiry"]) || !$dataV->CheckNumeric($_REQUEST["minpassword"])){						$validation = false;						$validationMessage = _("Please input valid format for password expiry / minimum password.");					}					if(!$dataV->CheckNumeric($_REQUEST["passwordhistory"]) || !$dataV->CheckNumeric($_REQUEST["maxallocation"])){						$validation = false;						$validationMessage = _("Please input valid format for password history / max allocation.");					}					if(!$dataV->CheckNumeric($_REQUEST["searchrange"])){						$validation = false;						$validationMessage = _("Please input valid format for search range.");					}					if($validation){											$ret = $serv->userRolesAddnew($_REQUEST["userlevel"], $_REQUEST["sessiontimeout"], $_REQUEST["passwordchange"], $_REQUEST["passwordexpiry"], $_REQUEST["minpassword"], $_REQUEST["passwordhistory"], $_REQUEST["maxallocation"], $_REQUEST["searchrange"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("User level has been successfully added.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}				}else{					echo _("Please input all required fields.");				}                            break;						case "userLocked":				if($_REQUEST["user_id"] != '' && $_REQUEST["username"] != '' && $_REQUEST["locked"] != ''){					if($_REQUEST["locked"] == 'true'){						$ret = $serv->userLocked($_REQUEST["user_id"], $_REQUEST["username"], $_REQUEST["locked"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo $_REQUEST["username"] . _("'s web account has been successfully locked.");						}else{							echo $ret->Message;						} 					}else if($_REQUEST["locked"] == 'false'){						$ret = $serv->userLocked($_REQUEST["user_id"], $_REQUEST["username"], $_REQUEST["locked"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo $_REQUEST["username"] . _("'s web account has been successfully unlocked.");						}else{							echo $ret->Message;						}					}									}else{					echo _("Not valid for user lock.");				}            break;						case "userResetPassword":                				if($_REQUEST["user_id"] != '' && $_REQUEST["username"] != ''){					$ret = $serv->userResetPassword($_REQUEST["user_id"], $_REQUEST["username"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0 ){						echo _("Successfully Reset Password");					}else{						echo $ret->Message;					}									}else{					echo _("Not valid for user reset password.");				}                            break;                        case "getUserlevelDetails":            	$ret = $serv->getUserlevelDetails($_REQUEST["userlevel_value"]);                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;                        case "userRolesUpdate":                				if($_REQUEST["id"] != '' && $_REQUEST["userlevel"] != '' && $_REQUEST["sessiontimeout"] != '' && $_REQUEST["passwordchange"] != '' && $_REQUEST["passwordexpiry"] != '' && $_REQUEST["minpassword"] != '' && $_REQUEST["passwordhistory"] != '' && $_REQUEST["maxallocation"] != '' && $_REQUEST["searchrange"] != '' && $_REQUEST["newpasswordexpiry"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckNumeric($_REQUEST["sessiontimeout"]) || !$dataV->CheckNumeric($_REQUEST["passwordchange"])){						$validation = false;						$validationMessage = _("Please input valid format for session timeout / password change.");					}					if(!$dataV->CheckNumeric($_REQUEST["passwordexpiry"]) || !$dataV->CheckNumeric($_REQUEST["minpassword"])){						$validation = false;						$validationMessage = _("Please input valid format for password expiry / minimum password.");					}					if(!$dataV->CheckNumeric($_REQUEST["passwordhistory"]) || !$dataV->CheckNumeric($_REQUEST["maxallocation"])){						$validation = false;						$validationMessage = _("Please input valid format for password history / max allocation.");					}					if(!$dataV->CheckNumeric($_REQUEST["searchrange"])){						$validation = false;						$validationMessage = _("Please input valid format for search range.");					}					if($validation){						if($_REQUEST["userlevel"] != 'SELECTUSERLEVEL'){							$ret = $serv->userRolesUpdate($_REQUEST["id"], $_REQUEST["userlevel"] , $_REQUEST["sessiontimeout"],$_REQUEST["passwordchange"],$_REQUEST["passwordexpiry"], $_REQUEST["minpassword"], $_REQUEST["passwordhistory"], $_REQUEST["maxallocation"], $_SESSION['currentUser'], $_REQUEST["searchrange"], $_REQUEST["newpasswordexpiry"]);														if(isset($ret->Token)){								$_SESSION["token"] = $ret->Token;							}							if($ret->ResponseCode == 14){								session_destroy();							}							if($ret->ResponseCode == 0 ){								echo _("Request user level updates has been successfully sent.");							}else{								echo $ret->Message;							}													}else{							echo _("Please SELECT USER LEVEL.");						}					}else{						echo $validationMessage;					}				}else{					echo _("Please input all required fields.");				}                            break;                        case "userUpdate":				$validation = true;				$resMessage = "";				if($_REQUEST["userlevel"] == 'SELECTUSERLEVEL'){					$validation = false;					$resMessage = _("Please select User Level.");				}				if(!filter_var($_REQUEST["email"], FILTER_VALIDATE_EMAIL)){					$validation = false;					$resMessage = _("Invalid Email format.");				}				if(!$dataV->CheckAlpha($_REQUEST['firstname']) || !$dataV->CheckAlpha($_REQUEST['lastname'])){					$validation = false;					$resMessage = _("Invalid Firstname/Lastname format.");				}				if(!$_REQUEST['department'] == ''){					if(!$dataV->CheckAlpha($_REQUEST['department'])){						$validation = false;						$resMessage = _("Invalid department format.");					}				}				if($_REQUEST["username"] == '' || $_REQUEST["firstname"] == '' || $_REQUEST["lastname"] == '' || $_REQUEST["msisdn"] == ''){					$validation = false;					$resMessage = _("Please input all required fields.");				}								if($validation){										$ret = $serv->userUpdate($_REQUEST["userid"], $_REQUEST["username"] , $_REQUEST["firstname"],$_REQUEST["lastname"],$_REQUEST["department"], $_REQUEST["userlevel"], $_REQUEST["status"], $_SESSION["currentUser"], $_REQUEST["email"], $_REQUEST["msisdn"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0 ){						echo $_REQUEST["username"] . _("'s web account has been successfully updated.");					}else{						echo $ret->Message;					}									}else{					echo $resMessage;				}            break;                        case "userChangePassword":				if($_REQUEST["oldpassword"] != '' && $_REQUEST["newpassword"] != '' && $_REQUEST["confirmpassword"] != ''){					if($_REQUEST["newpassword"] == $_REQUEST["confirmpassword"]){						$ret = $serv->userChangePassword($_SESSION["currentUserID"], $_SESSION["currentUser"], $_REQUEST["oldpassword"],$_REQUEST["newpassword"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							/*session_destroy();*/							echo $_SESSION["currentUser"] . _("'s password has been successfully changed.");						}else{							echo $ret->Message;						}											}else{						echo _("Passwords do not match! Please confirm your password!");					}				}else{					echo _("Please input and confirm your password!");				}            break;                        case "getSystemInfo":                $ret = $serv->getSystemInfo();                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;                        case "amlConfigType":                $ret = $serv->amlConfigType($_REQUEST["type"],$_REQUEST["accounttype"],$_REQUEST["key"]);                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);                            break;                        case "updateAmlConfigType":                				if($_REQUEST["id"] != '' && $_REQUEST["type"] != '' && $_REQUEST["accounttype"] != '' && $_REQUEST["key"] != '' && $_REQUEST["priority"] != '' && $_REQUEST["maxamount"] != '' && $_REQUEST["maxcurrentamount"] != '' && $_REQUEST["maxamountday"] != '' && $_REQUEST["maxamountmonth"] != '' && $_REQUEST["maxtransday"] != '' && $_REQUEST["maxtransmonth"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckNumeric($_REQUEST["maxamount"]) || !$dataV->CheckNumeric($_REQUEST["maxcurrentamount"])){						$validation = false;						$validationMessage = _("Please input valid format for max amount / max current amount.");					}					if(!$dataV->CheckNumeric($_REQUEST["maxamountday"]) || !$dataV->CheckNumeric($_REQUEST["maxamountmonth"])){						$validation = false;						$validationMessage = _("Please input valid format for max amount day / max amount month.");					}					if(!$dataV->CheckNumeric($_REQUEST["maxtransday"]) || !$dataV->CheckNumeric($_REQUEST["maxtransmonth"])){						$validation = false;						$validationMessage = _("Please input valid format for max trans day / max trans month.");					}					if($validation){						$ret = $serv->updateAmlConfigType($_REQUEST["id"], $_REQUEST["type"] , $_REQUEST["accounttype"],$_REQUEST["key"],$_REQUEST["priority"], $_REQUEST["maxamount"], $_REQUEST["maxcurrentamount"], $_REQUEST["maxamountday"],$_REQUEST["maxamountmonth"], $_REQUEST["maxtransday"],$_REQUEST["maxtransmonth"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}												echo $ret->Message;					}else{						echo $validationMessage;					}				}else{					echo _("Please input all required fields.");				}                            break;                        case "getAllUsers":                $ret = $serv->getAllUsers();                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;                        case "getAccountType":                $ret = $serv->getAccountType();                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;                        case "transactionSummary":                $ret = $serv->transactionSummary($_REQUEST["fromdate"], $_REQUEST["todate"]);                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}				                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;            			case "approveAllocationCheck":				/*data validation*/												if ($_REQUEST["msisdn"] == '' || $_REQUEST["transactionid"] == '' || $_REQUEST["value"] == '' || $_REQUEST["alloctype"] == '' || $_REQUEST["amount"] == ''){										echo _("Allocation / Deallocation not valid for approval!");				}else{					$_SESSION["allocMSISDN"] = $_REQUEST["msisdn"];					$_SESSION["allocTRANSID"] = $_REQUEST["transactionid"];					$_SESSION["allocVALUE"] = $_REQUEST["value"];					$_SESSION["allocTYPE"] = $_REQUEST["alloctype"];					if($_REQUEST["alloctype"] == 'ALLOC' && $_REQUEST["value"] == 'APPROVED'){						echo _("Allocate an amount of ") . $_REQUEST["amount"] . " to " . $_REQUEST["msisdn"] . " ?";					}else if($_REQUEST["alloctype"] == 'DEALLOC' && $_REQUEST["value"] == 'APPROVED'){						echo _("Deallocate an amount of ") . $_REQUEST["amount"] . " to " . $_REQUEST["msisdn"] . " ?";					}else{						echo _("Please enter you password.");					}									}				            break;			            case "approveAllocation":				/*data validation*/				$validation = true;				$validationMessage = "";				if ($_SESSION["currentPassword"] != $_REQUEST["PASSWORD"]){					$validation = false;					$validationMessage = _("Please input your correct PASSWORD!");				}				if ($_REQUEST["PASSWORD"] == ''){					$validation = false;					$validationMessage = _("Please input your PASSWORD!");				}				if ($_SESSION["allocTRANSID"] == '' || $_SESSION["allocVALUE"] == '' || $_SESSION["allocMSISDN"] == ''){					$validation = false;					$validationMessage = _("Allocation / Deallocation not valid for approval!");				}								if($validation){					if($_SESSION["allocVALUE"] == "APPROVED" && $_SESSION["allocTYPE"] == 'ALLOC'){						$ret = $serv->approveAllocation($_SESSION["currentUser"], $_SESSION["allocMSISDN"], $_SESSION["allocVALUE"],$_SESSION["allocTRANSID"]);																		if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("You have successfully allocated an amount of ") . $ret->Message . " to " . $_SESSION["allocMSISDN"] . ".";						}else{							echo $ret->Message;						}												exit;					}else if($_SESSION["allocVALUE"] == "APPROVED" && $_SESSION["allocTYPE"] == 'DEALLOC'){						$ret = $serv->approveAllocation($_SESSION["currentUser"], $_SESSION["allocMSISDN"], $_SESSION["allocVALUE"],$_SESSION["allocTRANSID"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}												if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("You have successfully approved deallocation an amount of ") . $ret->Message . " to " . $_SESSION["allocMSISDN"] . ".";						}else{							echo $ret->Message;						}												exit;					}else if($_SESSION["allocVALUE"] != "APPROVED" && $_SESSION["allocTYPE"] == 'ALLOC'){						$ret = $serv->approveAllocation($_SESSION["currentUser"], $_SESSION["allocMSISDN"], $_SESSION["allocVALUE"],$_SESSION["allocTRANSID"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}												if($ret->ResponseCode == 14){							session_destroy();						}												if($ret->ResponseCode == 0 ){							echo _("Successfully Disapprove");						}else{							echo $ret->Message;						}												exit;					}else if($_SESSION["allocVALUE"] != "APPROVED" && $_SESSION["allocTYPE"] == 'DEALLOC'){						$ret = $serv->approveAllocation($_SESSION["currentUser"], $_SESSION["allocMSISDN"], $_SESSION["allocVALUE"],$_SESSION["allocTRANSID"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}												if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Deallocation have successfully Disapproved! Amount of ") . $ret->Message . " to " . $_SESSION["allocMSISDN"] . ".";						}else{							echo $ret->Message;						}												exit;					}					$_SESSION["allocMSISDN"] = "";					$_SESSION["allocTRANSID"] = "";					$_SESSION["allocVALUE"] = "";					$_SESSION["allocTYPE"] = "";				}else{					echo $validationMessage;				}            break;                        case "RequestSystemInfo":                				if($_REQUEST["sysCurrencyType"] != '' && $_REQUEST["sysCountryCode"] != '' && $_REQUEST["sysAccountNumber"] != '' && $_REQUEST["sysSenderNumber"] != '' && $_REQUEST["sysAcceptDecimal"] != '' && $_REQUEST["sysDefaultDealerPassword"] != '' && $_REQUEST["sysFailedTransferCount"] != '' && $_REQUEST["sysInvalidPasswordCount"] != '' && $_REQUEST["sysRPREDayCount"] != '' && $_REQUEST["sysMinAlias"] != '' && $_REQUEST["sysMaxAlias"] != '' && $_REQUEST["sysMsisdnToAlias"] != '' && $_REQUEST["sysMinAlloc"] != '' && $_REQUEST["sysMaxAlloc"] != ''){										$validation = true;					$validationMessage = "";					if(!$dataV->CheckNumeric($_REQUEST["sysDefaultDealerPassword"])){						$validation = false;						$validationMessage = _("Please input valid format for default password.");					}					if(!$dataV->CheckNumeric($_REQUEST["sysFailedTransferCount"]) || !$dataV->CheckNumeric($_REQUEST["sysInvalidPasswordCount"])){						$validation = false;						$validationMessage = _("Please input valid format for failed transfer count / invalid password count.");					}					if(!$dataV->CheckNumeric($_REQUEST["sysRPREDayCount"]) || !$dataV->CheckNumeric($_REQUEST["sysMinAlias"])){						$validation = false;						$validationMessage = _("Please input valid format for RPRE day count / minimum alias.");					}					if(!$dataV->CheckNumeric($_REQUEST["sysMaxAlias"]) || !$dataV->CheckNumeric($_REQUEST["sysMsisdnToAlias"])){						$validation = false;						$validationMessage = _("Please input valid format for max alias / msisdn to alias.");					}					if(!$dataV->CheckNumeric($_REQUEST["sysMinAlloc"]) || !$dataV->CheckNumeric($_REQUEST["sysMaxAlloc"])){						$validation = false;						$validationMessage = _("Please input valid format for minimum alloc / max alloc.");					}					if($validation){						$arr= array(								"currencytype" => $_REQUEST['sysCurrencyType'],								"countrycode" => $_REQUEST['sysCountryCode'],								"accountnumber" => $_REQUEST['sysAccountNumber'],								"sendernumber" => $_REQUEST['sysSenderNumber'],								"acceptdecimal" => $_REQUEST['sysAcceptDecimal'],								"defaultdealerpassword" => $_REQUEST['sysDefaultDealerPassword'],								"failedtransfercount" => $_REQUEST['sysFailedTransferCount'],								"invalidpasswordcount" => $_REQUEST['sysInvalidPasswordCount'],								"username" => $_SESSION["currentUser"],								"rpreDayCount" => $_REQUEST['sysRPREDayCount'],								"minAlias" => $_REQUEST['sysMinAlias'],								"maxAlias" => $_REQUEST['sysMaxAlias'],								"msisdnToAlias" => $_REQUEST['sysMsisdnToAlias'],								"minAlloc" => $_REQUEST['sysMinAlloc'],								"maxAlloc" => $_REQUEST['sysMaxAlloc'],								"crypt" => $_REQUEST['sysCrypt']								);						$ret = $serv->call("requestSystemInfo",$arr,false);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}											if($ret->ResponseCode == 0 ){							echo _("Request system info has been successfully sent.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}				}else{					echo _("Please input all required fields.");				}            break;                        case "approveSystemInfo":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){					if($_REQUEST["remarks"] == "APPROVED"){						$ret = $serv->approveSystemInfo($_SESSION["currentUser"], $_REQUEST["id"], $_REQUEST["remarks"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}else if($_REQUEST["remarks"] != "APPROVED"){						$ret = $serv->approveSystemInfo($_SESSION["currentUser"], $_REQUEST["id"], $_REQUEST["remarks"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}				}else{					echo _("System Info not valid for approval.");				}            break;                        case "approveUserLevels":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){					if($_REQUEST["remarks"] == "APPROVED"){						$ret = $serv->approveUserLevels($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"], $_REQUEST["userlevel"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}else if($_REQUEST["remarks"] != "APPROVED"){						$ret = $serv->approveUserLevels($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"], $_REQUEST["userlevel"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}				}else{					echo _("User Level not valid for approval.");				}            break;                        case "requestMessages":                				if($_REQUEST["id"] != '' && $_REQUEST["message"] != '' && $_REQUEST["description"] != '' && $_REQUEST["type"] != '' && $_REQUEST["language"] != ''){					$ret = $serv->requestMessages($_REQUEST["id"], $_REQUEST["message"], $_REQUEST["description"], $_REQUEST["type"], $_REQUEST["language"], $_SESSION["currentUser"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0 ){						echo _("Request message has been successfully sent.");					}else{						echo $ret->Message;					}					exit;				}else{					echo _("Please input all required fields.");				}                           break;                        case "approveMessagesPndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){					if($_REQUEST["remarks"] == "APPROVED"){						$ret = $serv->approveMessagesPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}else if($_REQUEST["remarks"] != "APPROVED"){						$ret = $serv->approveMessagesPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}				}else{					echo _("Message not valid for approval.");				}            break;                        case "addAmlTypePndg":                				if($_REQUEST["type"] != '' && $_REQUEST["accounttype"] != '' && $_REQUEST["key"] != '' && $_REQUEST["priority"] != '' && $_REQUEST["maxamount"] != '' && $_REQUEST["maxcurrentamount"] != '' && $_REQUEST["maxamountday"] != '' && $_REQUEST["maxamountmonth"] != '' && $_REQUEST["maxtransday"] != '' && $_REQUEST["maxtransmonth"] != ''){									$ret = $serv->addAmlTypePndg($_REQUEST["type"] , $_REQUEST["accounttype"],$_REQUEST["key"],$_REQUEST["priority"], $_REQUEST["maxamount"], $_REQUEST["maxcurrentamount"], $_REQUEST["maxamountday"],$_REQUEST["maxamountmonth"], $_REQUEST["maxtransday"],$_REQUEST["maxtransmonth"],$_SESSION["currentUser"]);										if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if($ret->ResponseCode == 0 ){						echo _("Request AML Type has been successfully sent.");					}else{						echo $ret->Message;					}				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveAmlTypePndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){					if($_REQUEST["remarks"] == "APPROVED"){						$ret = $serv->approveAmlTypePndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}else if($_REQUEST["remarks"] != "APPROVED"){						$ret = $serv->approveAmlTypePndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}				}else{					echo _("AML Type not valid for approval.");				}            break;                        case "updateKeyCostType":                				if($_REQUEST["type"] != '' && $_REQUEST["account"] != '' && $_REQUEST["key"] != '' && $_REQUEST["fixed"] != '' && $_REQUEST["percent"] != '' && $_REQUEST["priority"] != '' && $_REQUEST["status"] != '' && $_REQUEST["amountfr"] != '' && $_REQUEST["amountto"] != '' && $_REQUEST["accountfr"] != '' && $_REQUEST["accountto"] != '' && $_REQUEST["typeid"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckNumeric($_REQUEST["fixed"]) || !$dataV->CheckNumeric($_REQUEST["percent"])){						$validation = false;						$validationMessage = _("Please input valid format for fixed / percent.");					}					if(!$dataV->CheckNumeric($_REQUEST["priority"]) || !$dataV->CheckNumeric($_REQUEST["status"])){						$validation = false;						$validationMessage = _("Please input valid format for priority / status.");					}					if(!$dataV->CheckNumeric($_REQUEST["amountfr"]) || !$dataV->CheckNumeric($_REQUEST["amountto"])){						$validation = false;						$validationMessage = _("Please input valid format for amount fr / amount to.");					}					if(!$dataV->CheckAlpha($_REQUEST["accountfr"]) || !$dataV->CheckAlpha($_REQUEST["accountto"])){						$validation = false;						$validationMessage = _("Please input valid format for account fr / account to.");					}									if($validation){						$ret = $serv->updateKeyCostType($_REQUEST["key"], $_REQUEST["type"], $_REQUEST["account"], $_REQUEST["fixed"], $_REQUEST["percent"],$_REQUEST["priority"], $_REQUEST["status"], $_REQUEST["send"], $_REQUEST["receive"], $_SESSION["currentUser"], $_REQUEST["amountfr"], $_REQUEST["amountto"], $_REQUEST["accountfr"], $_REQUEST["accountto"], $_REQUEST["typeid"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Request Key Cost Type has been successfully sent.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveKeyCostTypePndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){					if($_REQUEST["remarks"] == "APPROVED"){						$ret = $serv->approveKeyCostTypePndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}else if($_REQUEST["remarks"] != "APPROVED"){						$ret = $serv->approveKeyCostTypePndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit; 					}				}else{					echo _("KeyCost Type not valid for approval.");				}            break;                        case "search":            	$ret = $serv->search($_REQUEST["inp"],$_REQUEST["option"]);				if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}                echo $ret->ResponseCode;                exit;            break;						case "validateMSISDN":            	$ret = $serv->validateMSISDN($_REQUEST["inp"]);				if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}                echo $ret->ResponseCode;                exit;            break;						case "validateNickname":            	$ret = $serv->validateNickname($_REQUEST["inp"]);				if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}                echo $ret->ResponseCode;                exit;            break;                        case "addKeyCostType":                				if($_REQUEST["type"] != '' && $_REQUEST["account"] != '' && $_REQUEST["key"] != '' && $_REQUEST["fixed"] != '' && $_REQUEST["percent"] != '' && $_REQUEST["priority"] != '' && $_REQUEST["amountfr"] != '' && $_REQUEST["amountto"] != '' && $_REQUEST["accountfr"] != '' && $_REQUEST["accountto"] != '' ){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["type"]) || !$dataV->CheckAlpha($_REQUEST["key"])){						$validation = false;						$validationMessage = _("Please input valid format for type / key.");					}					if(!$dataV->CheckNumeric($_REQUEST["fixed"]) || !$dataV->CheckNumeric($_REQUEST["account"])){						$validation = false;						$validationMessage = _("Please input valid format for fixed / account.");					}					if(!$dataV->CheckNumeric($_REQUEST["priority"]) || !$dataV->CheckNumeric($_REQUEST["percent"])){						$validation = false;						$validationMessage = _("Please input valid format for priority / percent.");					}					if(!$dataV->CheckNumeric($_REQUEST["amountfr"]) || !$dataV->CheckNumeric($_REQUEST["amountto"])){						$validation = false;						$validationMessage = _("Please input valid format for amount fr / amount to.");					}					if(!$dataV->CheckAlpha($_REQUEST["accountfr"]) || !$dataV->CheckAlpha($_REQUEST["accountto"])){						$validation = false;						$validationMessage = _("Please input valid format for account fr / account to.");					}					if($validation){						$ret = $serv->addKeyCostType($_REQUEST["key"], $_REQUEST["type"], $_REQUEST["account"], $_REQUEST["fixed"], $_REQUEST["percent"],$_REQUEST["priority"], $_REQUEST["send"], $_REQUEST["receive"], $_REQUEST["amountfr"], $_REQUEST["amountto"], $_REQUEST["accountfr"], $_REQUEST["accountto"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Key Cost Type has been successfully added.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "requestTransceiver":                				if($_REQUEST["pndgid"] != '' && $_REQUEST["systemid"] != '' && $_REQUEST["password"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["port"] != '' && $_REQUEST["ton"] != '' && $_REQUEST["npi"] != '' && $_REQUEST["origton"] != '' && $_REQUEST["orignpi"] != '' && $_REQUEST["destton"] != '' && $_REQUEST["destnpi"] != '' && $_REQUEST["status"] != '' && $_REQUEST["hostip"] != '' && $_REQUEST["shortcode"] != '' && $_REQUEST["keepaliveinterval"] != '' && $_REQUEST["responsetimeout"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["systemid"]) || !$dataV->CheckAlpha($_REQUEST["password"])){						$validation = false;						$validationMessage = _("Please input valid format for systemid / password.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["port"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / port.");					}					if(!$dataV->CheckNumeric($_REQUEST["ton"]) || !$dataV->CheckNumeric($_REQUEST["npi"])){						$validation = false;						$validationMessage = _("Please input valid format for ton / npi.");					}					if(!$dataV->CheckNumeric($_REQUEST["origton"]) || !$dataV->CheckNumeric($_REQUEST["orignpi"])){						$validation = false;						$validationMessage = _("Please input valid format for origton / orignpi.");					}					if(!$dataV->CheckNumeric($_REQUEST["destton"]) || !$dataV->CheckNumeric($_REQUEST["destnpi"])){						$validation = false;						$validationMessage = _("Please input valid format for destton / destnpi.");					}					if(!$dataV->CheckNumeric($_REQUEST["status"])){						$validation = false;						$validationMessage = _("Please input valid format for status.");					}					if(!$dataV->CheckNumeric($_REQUEST["hostip"]) || !$dataV->CheckNumeric($_REQUEST["shortcode"])){						$validation = false;						$validationMessage = _("Please input valid format for hostip / shortcode.");					}					if(!$dataV->CheckNumeric($_REQUEST["keepaliveinterval"]) || !$dataV->CheckNumeric($_REQUEST["responsetimeout"])){						$validation = false;						$validationMessage = _("Please input valid format for keepaliveinterval / responsetimeout.");					}									if($validation){						$ret = $serv->requestTransceiver($_REQUEST["pndgid"], $_REQUEST["systemid"], $_REQUEST["password"], $_REQUEST["ip"], $_REQUEST["port"],$_REQUEST["ton"], $_REQUEST["npi"], $_REQUEST["origton"], $_REQUEST["orignpi"], $_REQUEST["destton"], $_REQUEST["destnpi"], $_REQUEST["systype"], $_REQUEST["status"], $_REQUEST["hostip"], $_REQUEST["shortcode"], $_REQUEST["keepaliveinterval"], $_REQUEST["responsetimeout"], $_REQUEST["pinpattern"], $_REQUEST["pinreplace"], $_SESSION["currentUser"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Request Transceiver has been successfully sent.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveTransceiverPndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){					if($_REQUEST["remarks"] == "APPROVED"){						$ret = $serv->approveTransceiverPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						echo $ret->Message;						exit;					}else if($_REQUEST["remarks"] != "APPROVED"){						$ret = $serv->approveTransceiverPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);												echo $ret->Message;						exit;					}				}else{					echo _("Transceiver not valid for approval.");				}            break;                        case "requestTransmitter":                				if($_REQUEST["pndgid"] != '' && $_REQUEST["systemid"] != '' && $_REQUEST["password"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["port"] != '' && $_REQUEST["ton"] != '' && $_REQUEST["npi"] != '' && $_REQUEST["origton"] != '' && $_REQUEST["orignpi"] != '' && $_REQUEST["destton"] != '' && $_REQUEST["destnpi"] != '' && $_REQUEST["status"] != '' && $_REQUEST["hostip"] != '' && $_REQUEST["shortcode"] != '' && $_REQUEST["keepaliveinterval"] != '' && $_REQUEST["responsetimeout"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["systemid"]) || !$dataV->CheckAlpha($_REQUEST["password"])){						$validation = false;						$validationMessage = _("Please input valid format for systemid / password.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["port"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / port.");					}					if(!$dataV->CheckNumeric($_REQUEST["ton"]) || !$dataV->CheckNumeric($_REQUEST["npi"])){						$validation = false;						$validationMessage = _("Please input valid format for ton / npi.");					}					if(!$dataV->CheckNumeric($_REQUEST["origton"]) || !$dataV->CheckNumeric($_REQUEST["orignpi"])){						$validation = false;						$validationMessage = _("Please input valid format for origton / orignpi.");					}					if(!$dataV->CheckNumeric($_REQUEST["destton"]) || !$dataV->CheckNumeric($_REQUEST["destnpi"])){						$validation = false;						$validationMessage = _("Please input valid format for destton / destnpi.");					}					if(!$dataV->CheckNumeric($_REQUEST["status"])){						$validation = false;						$validationMessage = _("Please input valid format for status.");					}					if(!$dataV->CheckNumeric($_REQUEST["hostip"]) || !$dataV->CheckNumeric($_REQUEST["shortcode"])){						$validation = false;						$validationMessage = _("Please input valid format for hostip / shortcode.");					}					if(!$dataV->CheckNumeric($_REQUEST["keepaliveinterval"]) || !$dataV->CheckNumeric($_REQUEST["responsetimeout"])){						$validation = false;						$validationMessage = _("Please input valid format for keepaliveinterval / responsetimeout.");					}										if($validation){						$ret = $serv->requestTransmitter($_REQUEST["pndgid"], $_REQUEST["systemid"], $_REQUEST["password"], $_REQUEST["ip"], $_REQUEST["port"],$_REQUEST["ton"], $_REQUEST["npi"], $_REQUEST["origton"], $_REQUEST["orignpi"], $_REQUEST["destton"], $_REQUEST["destnpi"], $_REQUEST["systype"], $_REQUEST["status"], $_REQUEST["hostip"], $_REQUEST["shortcode"], $_REQUEST["keepaliveinterval"], $_REQUEST["responsetimeout"], $_REQUEST["pinpattern"], $_REQUEST["pinreplace"], $_SESSION["currentUser"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Request Transmitter has been successfully sent.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveTransmitterPndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){										$ret = $serv->approveTransmitterPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);															if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					echo $ret->Message;					exit;				}else{					echo _("Transmitter not valid for approval.");				}            break;                        case "requestReceiver":                				if($_REQUEST["pndgid"] != '' && $_REQUEST["systemid"] != '' && $_REQUEST["password"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["port"] != '' && $_REQUEST["ton"] != '' && $_REQUEST["npi"] != '' && $_REQUEST["secured"] != '' && $_REQUEST["status"] != '' && $_REQUEST["hostip"] != '' && $_REQUEST["shortcode"] != '' && $_REQUEST["keepaliveinterval"] != '' && $_REQUEST["responsetimeout"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["systemid"]) || !$dataV->CheckAlpha($_REQUEST["password"])){						$validation = false;						$validationMessage = _("Please input valid format for systemid / password.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["port"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / port.");					}					if(!$dataV->CheckNumeric($_REQUEST["ton"]) || !$dataV->CheckNumeric($_REQUEST["npi"])){						$validation = false;						$validationMessage = _("Please input valid format for ton / npi.");					}					if(!$dataV->CheckNumeric($_REQUEST["status"])){						$validation = false;						$validationMessage = _("Please input valid format for status.");					}					if(!$dataV->CheckNumeric($_REQUEST["hostip"]) || !$dataV->CheckNumeric($_REQUEST["shortcode"])){						$validation = false;						$validationMessage = _("Please input valid format for hostip / shortcode.");					}					if(!$dataV->CheckNumeric($_REQUEST["keepaliveinterval"]) || !$dataV->CheckNumeric($_REQUEST["responsetimeout"])){						$validation = false;						$validationMessage = _("Please input valid format for keepaliveinterval / responsetimeout.");					}					if(!$dataV->CheckNumeric($_REQUEST["secured"])){						$validation = false;						$validationMessage = _("Please input valid format for secured.");					}									if($validation){						$ret = $serv->requestReceiver($_REQUEST["pndgid"], $_REQUEST["systemid"], $_REQUEST["password"], $_REQUEST["ip"], $_REQUEST["port"],$_REQUEST["ton"], $_REQUEST["npi"], $_REQUEST["systype"], $_REQUEST["status"], $_REQUEST["hostip"], $_REQUEST["shortcode"], $_REQUEST["keepaliveinterval"], $_REQUEST["responsetimeout"], $_REQUEST["secured"], $_SESSION["currentUser"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Request Receiver has been successfully sent.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveReceiverPndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){										$ret = $serv->approveReceiverPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);															if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					echo $ret->Message;					exit;									}else{					echo _("Receiver not valid for approval.");				}            break;                        case "requestServerConfig":                				if($_REQUEST["pndgid"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["func"] != '' && $_REQUEST["status"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["func"])){						$validation = false;						$validationMessage = _("Please input valid format for function.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["status"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / status.");					}									if($validation){						$ret = $serv->requestServerConfig($_REQUEST["pndgid"], $_REQUEST["ip"], $_REQUEST["func"], $_REQUEST["status"], $_SESSION["currentUser"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Request Server Config has been successfully sent.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveServerConfigPndg":				if($_REQUEST["id"] != '' && $_REQUEST["remarks"] != ''){										$ret = $serv->approveServerConfigPndg($_SESSION["currentUser"], $_REQUEST["remarks"], $_REQUEST["id"]);																if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					echo $ret->Message;					exit;									}else{					echo _("Server Config not valid for approval.");				}            break;                        case "addTransceiver":                				if($_REQUEST["systemid"] != '' && $_REQUEST["password"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["port"] != '' && $_REQUEST["hostip"] != '' && $_REQUEST["shortcode"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["systemid"]) || !$dataV->CheckAlpha($_REQUEST["password"])){						$validation = false;						$validationMessage = _("Please input valid format for systemid / password.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["port"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / port.");					}										if(!$dataV->CheckNumeric($_REQUEST["hostip"]) || !$dataV->CheckNumeric($_REQUEST["shortcode"])){						$validation = false;						$validationMessage = _("Please input valid format for hostip / shortcode.");					}					if($validation){						$ret = $serv->addTransceiver($_REQUEST["systemid"], $_REQUEST["password"], $_REQUEST["ip"], $_REQUEST["port"], $_REQUEST["systype"],$_REQUEST["hostip"], $_REQUEST["shortcode"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Transceiver has been successfully added.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "addTransmitter":                				if($_REQUEST["systemid"] != '' && $_REQUEST["password"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["port"] != '' && $_REQUEST["hostip"] != '' && $_REQUEST["shortcode"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["systemid"]) || !$dataV->CheckAlpha($_REQUEST["password"])){						$validation = false;						$validationMessage = _("Please input valid format for systemid / password.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["port"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / port.");					}										if(!$dataV->CheckNumeric($_REQUEST["hostip"]) || !$dataV->CheckNumeric($_REQUEST["shortcode"])){						$validation = false;						$validationMessage = _("Please input valid format for hostip / shortcode.");					}									if($validation){						$ret = $serv->addTransmitter($_REQUEST["systemid"], $_REQUEST["password"], $_REQUEST["ip"], $_REQUEST["port"], $_REQUEST["systype"],$_REQUEST["hostip"], $_REQUEST["shortcode"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Transmitter has been successfully added.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "addReceiver":                				if($_REQUEST["systemid"] != '' && $_REQUEST["password"] != '' && $_REQUEST["ip"] != '' && $_REQUEST["port"] != '' && $_REQUEST["hostip"] != '' && $_REQUEST["shortcode"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["systemid"]) || !$dataV->CheckAlpha($_REQUEST["password"])){						$validation = false;						$validationMessage = _("Please input valid format for systemid / password.");					}					if(!$dataV->CheckNumeric($_REQUEST["ip"]) || !$dataV->CheckNumeric($_REQUEST["port"])){						$validation = false;						$validationMessage = _("Please input valid format for ip / port.");					}										if(!$dataV->CheckNumeric($_REQUEST["hostip"]) || !$dataV->CheckNumeric($_REQUEST["shortcode"])){						$validation = false;						$validationMessage = _("Please input valid format for hostip / shortcode.");					}										if($validation){						$ret = $serv->addReceiver($_REQUEST["systemid"], $_REQUEST["password"], $_REQUEST["ip"], $_REQUEST["port"], $_REQUEST["systype"],$_REQUEST["hostip"], $_REQUEST["shortcode"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Receiver has been successfully added.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "addServerConfig":                				if($_REQUEST["ip"] != ''){					$validation = true;					$validationMessage = "";										if (!filter_var($_REQUEST["ip"], FILTER_VALIDATE_IP)) {						$validation = false;						$validationMessage = _("Please input valid format for ip.");					}									if($validation){						$ret = $serv->addServerConfig($_REQUEST["ip"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Server Config has been successfully added.");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}            break;                        case "requestReversal":                				if($_REQUEST["referenceid"] != '' && $_REQUEST["type"] != '' && $_REQUEST["frmsisdn"] != '' && $_REQUEST["tomsisdn"] != '' && $_REQUEST["amount"] != '' && $_REQUEST["remarks"] != ''){									$validation = true;					$validationMessage = "";					if(!$dataV->CheckAlpha($_REQUEST["remarks"])){						$validation = false;						$validationMessage = _("Please input valid format for remarks.");					}										if($validation){						$ret = $serv->requestReversal($_REQUEST["referenceid"], $_REQUEST["type"], $_REQUEST["frmsisdn"], $_REQUEST["tomsisdn"], $_REQUEST["amount"], $_SESSION["currentUser"], $_REQUEST["remarks"]);												if(isset($ret->Token)){							$_SESSION["token"] = $ret->Token;						}						if($ret->ResponseCode == 14){							session_destroy();						}						if($ret->ResponseCode == 0 ){							echo _("Success, please wait for the approval");						}else if($ret->ResponseCode == 98){							echo _("Cash reversal already exists");						}else{							echo $ret->Message;						}					}else{						echo $validationMessage;					}					exit;				}else{					echo _("Please input all required fields.");				}                            break;                        case "approveReversalPndg":							/*data validation*/				$validation = true;				$validationMessage = "";								if($_REQUEST["frmsisdn"] == '' || $_REQUEST["tomsisdn"] == '' || $_REQUEST["value"] == '' || $_REQUEST["referenceid"] == ''){					$validation = false;					$validationMessage = _("Please input all required fields.");				}				if ($_SESSION["currentPassword"] != $_REQUEST["reversalPassword"]){					$validation = false;					$validationMessage = _("Please input your correct PASSWORD!");				}				if ($_REQUEST["reversalPassword"] == ''){					$validation = false;					$validationMessage = _("Please input your PASSWORD!");				}								if($validation){										$ret = $serv->approveReversalPndg($_SESSION["currentUser"], $_REQUEST["frmsisdn"], $_REQUEST["tomsisdn"], $_REQUEST["value"], $_REQUEST["referenceid"]);					if(isset($ret->Token)){						$_SESSION["token"] = $ret->Token;					}					if($ret->ResponseCode == 14){						session_destroy();					}					if ($_REQUEST["value"] == "APPROVE"){						if($ret->ResponseCode == 0 ){							echo _("You have successfully reverse an amount of ") . $ret->Message;						}else{							echo $ret->Message;						}					}else{						if($ret->ResponseCode == 0 ){							echo _("Successfully rejected");						}else{							echo $ret->Message;						}					}					exit;									}else{					echo $validationMessage;				}				            break;						case "queryGlobal":				                $ret = $serv->queryGlobal($_REQUEST["query"]);                header('Content-Type: text/javascript');								if(isset($ret->Token)){					$_SESSION["token"] = $ret->Token;				}				if($ret->ResponseCode == 14){					session_destroy();				}                $arr = array("value"=>$ret->Value, "responsecode" => $ret->ResponseCode, "message" => $ret->Message);                echo json_encode($arr);            break;		}	}}else{    echo _("Unauthorized Access!");}?>